#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class VaultDoor8 {
public:
    std::vector<unsigned char> unscramble(const std::vector<unsigned char>& scrambled) {
        /* Reverse the scramble operation */
        std::vector<unsigned char> a = scrambled;
        for (size_t b = 0; b < a.size(); b++) {
            unsigned char c = a[b];
            // Apply operations in reverse order
            c = switchBits(c, 6, 7);
            c = switchBits(c, 2, 5);
            c = switchBits(c, 3, 4);
            c = switchBits(c, 0, 1);
            c = switchBits(c, 4, 7);
            c = switchBits(c, 5, 6);
            c = switchBits(c, 0, 3);
            c = switchBits(c, 1, 2);
            a[b] = c;
        }
        return a;
    }

    unsigned char switchBits(unsigned char c, int p1, int p2) {
        /* Same as original - this operation is its own inverse */
        unsigned char mask1 = (unsigned char)(1 << p1);
        unsigned char mask2 = (unsigned char)(1 << p2);
        unsigned char bit1 = (unsigned char)(c & mask1);
        unsigned char bit2 = (unsigned char)(c & mask2);
        unsigned char rest = (unsigned char)(c & ~(mask1 | mask2));
        unsigned char shift = (unsigned char)(p2 - p1);
        unsigned char result = (unsigned char)((bit1 << shift) | (bit2 >> shift) | rest);
        return result;
    }

    std::string getPassword() {
        std::vector<unsigned char> expected = {
            0xF4, 0xC0, 0x97, 0xF0, 0x77, 0x97, 0xC0, 0xE4,
            0xF0, 0x77, 0xA4, 0xD0, 0xC5, 0x77, 0xF4, 0x86,
            0xD0, 0xA5, 0x45, 0x96, 0x27, 0xB5, 0x77, 0xC2,
            0xD2, 0x95, 0xA4, 0xF0, 0xD2, 0xD2, 0xC1, 0x95
        };
        
        std::vector<unsigned char> unscrambled = unscramble(expected);
        return std::string(unscrambled.begin(), unscrambled.end());
    }
};

int main() {
    VaultDoor8 vault;
    std::string password = vault.getPassword();
    
    std::cout << "The unscrambled password part is: " << password << std::endl;
    std::cout << "A valid full password would be: \"whatever" << password << "x\"" << std::endl;
    
    return 0;
}
